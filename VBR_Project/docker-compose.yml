version: "3"

services:
  rabbitmqServer:
    container_name: rabbitmqServer
    image: rabbitmq:3.10.7-management
    hostname: "rabbitmqhost"
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/log/:/var/log/rabbitmq/
    ports:
      # - 15672:15672
      # - 7801:5672
      - 5672:5672    #amqp
      - 15672:15672  #http
      - 15692:15692  #prometheus
    healthcheck:
      #rabbitmq-diagnostics check_port_connectivity
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms
      interval: 30s
      timeout: 3s
      retries: 3

    # networks:
    #   - rabbitnetwork
    # command:
    #   - /bin/bash
    #   - -c
    #   - |
    #     rabbitmqctl add_user test test
    #     rabbitmqctl set_user_tags test administrator
    #     rabbitmqctl set_permissions -p / test "." "." ".*"

  # workspace:
  #   build: .
  #   volumes:
  #     - ..:/workspace:cached

  # rmq_producer_1:
  #   build:
  #       context: .
  #       dockerfile: ./Dockerfile
  #   container_name: rmq_producer_1
  #   environment:
  #     - PROD_NUM=1
  #     - HOST='${HOST}'
  #     - PORT='${PORT}'
  #     - USER='${USER}'
  #     - PASSWORD='${PASSWORD}'
  #     - REPO_URL='${REPO_URL}'
  #     - TOKEN='${TOKEN}'
  #     - URL_PATH_STORAGE='${URL_PATH_STORAGE}'
  #     - EXCHANGE='${EXCHANGE}'
  #     - EXCHANGE_TYPE='${EXCHANGE_TYPE}'
  #     - QUEUE_REQUEST='${QUEUE_REQUEST}'
  #     - QUEUE_RESPONSE='${QUEUE_RESPONSE}'
  #     - ROUTING_KEY_REQUEST='${ROUTING_KEY_REQUEST_PRODUCER}'
  #     - ROUTING_KEY_RESPONSE='${ROUTING_KEY_RESPONSE_PRODUCER}'
  #   depends_on:
  #     - rabbitmq_server
  #     - rmq_consumer_1
  #     - rmq_consumer_2

  #   volumes:
  #     - ./rabbit_producer/:/workspace/rabbit_producer_1/
  #   # ports:
  #   #   - 7000:7000
  #   # command: python ./rpc_producer.py
  #   # command: sh -c "rabbitmqctl add_user test test && rabbitmqctl set_user_tags test administrator && rabbitmqctl set_permissions -p / test "." "." ".*" "
  #   restart: always

  # rmq_producer_2:
  #   build:
  #       context: .
  #       dockerfile: ./Dockerfile
  #   container_name: rmq_producer_2
  #   environment:
  #     - PROD_NUM=2
  #     - HOST='${HOST}'
  #     - PORT='${PORT}'
  #     - USER='${USER}'
  #     - PASSWORD='${PASSWORD}'
  #     - REPO_URL='${REPO_URL}'
  #     - TOKEN='${TOKEN}'
  #     - URL_PATH_STORAGE='${URL_PATH_STORAGE}'
  #     - EXCHANGE='${EXCHANGE}'
  #     - EXCHANGE_TYPE='${EXCHANGE_TYPE}'
  #     - QUEUE_REQUEST='${QUEUE_REQUEST}'
  #     - QUEUE_RESPONSE='${QUEUE_RESPONSE}'
  #     - ROUTING_KEY_REQUEST='${ROUTING_KEY_REQUEST_PRODUCER}'
  #     - ROUTING_KEY_RESPONSE='${ROUTING_KEY_RESPONSE_PRODUCER}'
  #   depends_on:
  #     - rabbitmq_server
  #     - rmq_consumer_1
  #     - rmq_consumer_2

  #   volumes:
  #     - ./rabbit_producer/:/workspace/rabbit_producer_2/
  #   # ports:
  #   #   - 7000:7000
  #   # command: python ./rpc_producer.py
  #   restart: always

  # rmq_producer_3:
  #   build:
  #       context: .
  #       dockerfile: ./Dockerfile
  #   container_name: rmq_producer_3
  #   environment:
  #     - PROD_NUM=3
  #     - HOST='${HOST}'
  #     - PORT='${PORT}'
  #     - USER='${USER}'
  #     - PASSWORD='${PASSWORD}'
  #     - REPO_URL='${REPO_URL}'
  #     - TOKEN='${TOKEN}'
  #     - URL_PATH_STORAGE='${URL_PATH_STORAGE}'
  #     - EXCHANGE='${EXCHANGE}'
  #     - EXCHANGE_TYPE='${EXCHANGE_TYPE}'
  #     - QUEUE_REQUEST='${QUEUE_REQUEST}'
  #     - QUEUE_RESPONSE='${QUEUE_RESPONSE}'
  #     - ROUTING_KEY_REQUEST='${ROUTING_KEY_REQUEST_PRODUCER}'
  #     - ROUTING_KEY_RESPONSE='${ROUTING_KEY_RESPONSE_PRODUCER}'
  #   depends_on:
  #     - rabbitmq_server
  #     - rmq_consumer_1
  #     - rmq_consumer_2

  #   volumes:
  #     - ./rabbit_producer/:/workspace/rabbit_producer_3/
  #   # ports:
  #   #   - 7000:7000
  #   # command: python ./rpc_producer.py
  #   restart: always

  rmq_consumer_1:
    tty: true
    container_name: rmq_consumer_1
    build:
        context: .
        dockerfile: ./rabbit_consumer/Dockerfile
    restart: always
    depends_on:
      rabbitmqServer:
        condition: service_healthy
    ports:
      - 8000:8000
    environment:
      - HOST=${HOST}
      - PORT=${PORT}
      - USER=${USER}
      - PASSWORD=${PASSWORD}
      - REPO_URL=${REPO_URL}
      - TOKEN=${TOKEN}
      - URL_PATH_STORAGE=${URL_PATH_STORAGE}
      - EXCHANGE=${EXCHANGE}
      - EXCHANGE_TYPE=${EXCHANGE_TYPE}
      - QUEUE_REQUEST=${QUEUE_REQUEST}
      - QUEUE_RESPONSE=${QUEUE_RESPONSE}
      - ROUTING_KEY_REQUEST=${ROUTING_KEY_REQUEST_CONSUMER}
      - ROUTING_KEY_RESPONSE=${ROUTING_KEY_RESPONSE_CONSUMER}
    volumes:
      - ./rabbit_consumer/:/workspace/rabbit_consumer_1/

    # networks:
    #   - rabbitnetwork

    command: python3 /workspace/rabbit_consumer_1/rpc_consumer.py

  # rmq_consumer_2:

  #   build:
  #       context: .
  #       dockerfile: ./Dockerfile
  #   container_name: rmq_consumer_2
  #   environment:
  #     - PROD_NUM=3
  #     - HOST='${HOST}'
  #     - PORT='${PORT}'
  #     - USER='${USER}'
  #     - PASSWORD='${PASSWORD}'
  #     - REPO_URL='${REPO_URL}'
  #     - TOKEN='${TOKEN}'
  #     - URL_PATH_STORAGE='${URL_PATH_STORAGE}'
  #     - EXCHANGE='${EXCHANGE}'
  #     - EXCHANGE_TYPE='${EXCHANGE_TYPE}'
  #     - QUEUE_REQUEST='${QUEUE_REQUEST}'
  #     - QUEUE_RESPONSE='${QUEUE_RESPONSE}'
  #     - ROUTING_KEY_REQUEST='${ROUTING_KEY_REQUEST_CONSUMER}'
  #     - ROUTING_KEY_RESPONSE='${ROUTING_KEY_RESPONSE_CONSUMER}'
  #   depends_on:
  #     - rabbitmq_server
  #   volumes:
  #     - ./rabbit_consumer/:/workspace/rabbit_consumer_2/

    # command: python /workspace/rabbit_consumer_2/rpc_consumer.py

# networks:
#   rabbitnetwork:
#     driver: bridge